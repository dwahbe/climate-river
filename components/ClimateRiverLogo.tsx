'use client'

import React from 'react'

interface ClimateRiverLogoProps {
  className?: string
  animated?: boolean
  size?: 'sm' | 'md' | 'lg' | 'xl'
  variant?: 'monochrome' | 'colored'
}

export default function ClimateRiverLogo({
  className = '',
  animated = false,
  size = 'md',
  variant = 'monochrome',
}: ClimateRiverLogoProps) {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-6 h-6',
    lg: 'w-8 h-8',
    xl: 'w-12 h-12',
  }

  const colorClass = variant === 'monochrome' ? 'text-black' : 'text-current'

  return (
    <svg
      version="1.1"
      id="Layer_1"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      x="0px"
      y="0px"
      width="100%"
      viewBox="0 0 304 272"
      enableBackground="new 0 0 304 272"
      xmlSpace="preserve"
      className={`${sizeClasses[size]} ${colorClass} ${className}`}
    >
      {/* Gradient definitions for colored variant */}
      {variant === 'colored' && (
        <defs>
          <linearGradient
            id="climate-gradient"
            x1="0%"
            y1="0%"
            x2="100%"
            y2="100%"
          >
            <stop offset="0%" stopColor="#3B82F6" />
            <stop offset="20%" stopColor="#EC4899" />
            <stop offset="40%" stopColor="#06B6D4" />
            <stop offset="60%" stopColor="#EF4444" />
            <stop offset="80%" stopColor="#10B981" />
            <stop offset="100%" stopColor="#8B5CF6" />
          </linearGradient>
        </defs>
      )}

      <path
        fill={variant === 'colored' ? 'url(#climate-gradient)' : 'currentColor'}
        opacity="1.000000"
        stroke="none"
        className={animated ? 'animate-flow' : ''}
        d="
M57.575699,185.216431 
	C39.610359,137.772995 50.559528,82.090637 97.318161,49.757851 
	C120.056435,34.034718 145.166763,27.145428 172.417480,29.857119 
	C221.281357,34.719517 265.493805,71.557625 273.583862,123.474731 
	C282.481659,180.575607 248.158447,235.411758 194.682587,251.775253 
	C156.147675,263.566864 121.486153,254.909409 90.256897,230.353088 
	C75.189354,218.505081 65.128609,202.994324 57.575699,185.216431 
M172.706192,47.017845 
	C171.391418,46.820236 170.082962,46.525593 168.760925,46.439362 
	C142.745605,44.742519 119.827972,52.687660 99.972778,69.274567 
	C91.455299,76.390007 83.554649,84.274483 78.719353,95.113953 
	C88.745346,94.475502 98.320740,93.899178 107.872948,95.190727 
	C122.761818,97.203842 136.337357,102.851364 149.448807,109.945808 
	C159.006638,115.117455 169.020721,119.079849 180.081818,119.683189 
	C205.389633,121.063644 223.573608,107.777710 239.951645,90.716721 
	C241.467514,89.137650 241.574524,87.830765 240.166702,85.970169 
	C223.362854,63.761829 201.327698,50.593716 172.706192,47.017845 
M104.609024,181.586639 
	C115.700752,183.711731 125.978912,187.953979 135.475662,193.967682 
	C142.364929,198.330231 148.840118,203.350159 155.756485,207.665817 
	C185.704330,226.352539 215.947861,223.190369 238.673462,199.037033 
	C250.390732,186.583618 254.441269,170.875946 257.339294,154.263855 
	C238.830719,170.993591 217.973816,181.733932 193.249588,183.167068 
	C175.686691,184.185120 159.416534,178.881058 144.080490,170.542130 
	C135.604919,165.933533 127.561600,160.520584 118.463318,157.071564 
	C102.775200,151.124405 87.111595,150.234970 71.304657,156.672058 
	C68.239655,157.920227 67.442551,159.525879 68.235558,162.743561 
	C69.510956,167.918625 71.197342,172.946747 72.738876,178.032104 
	C73.815842,181.584930 75.681236,182.085236 79.023819,181.369751 
	C87.235741,179.611954 95.515984,179.782440 104.609024,181.586639 
M179.005554,165.525940 
	C182.305405,165.898239 185.618103,166.680527 188.903061,166.577576 
	C213.822113,165.796707 233.848480,154.706467 250.436432,136.741745 
	C253.093689,133.863953 256.745361,130.975647 256.625244,126.787292 
	C256.411255,119.323540 254.128769,112.249489 250.768600,105.519257 
	C247.822327,106.425972 246.594543,108.562973 244.836746,110.019035 
	C242.912964,111.612610 241.080383,113.317307 239.140839,114.890724 
	C209.611664,138.845734 177.806839,143.850235 143.490387,125.995132 
	C135.502289,121.838875 127.644608,117.479797 119.019867,114.785072 
	C104.721245,110.317589 90.250168,109.985550 75.704666,113.425598 
	C73.504707,113.945892 70.561363,114.214821 69.815437,116.661880 
	C67.552917,124.084198 66.388306,131.718430 66.436462,139.958511 
	C73.551506,137.980011 80.094284,136.108124 86.907341,135.681519 
	C107.033791,134.421280 125.382591,139.895752 142.472809,150.274673 
	C153.621017,157.044983 165.245377,162.750595 179.005554,165.525940 
M146.844421,238.601273 
	C159.108597,240.168518 171.326614,240.964981 183.949310,237.034515 
	C181.612366,234.903900 179.450226,235.343857 177.558716,234.953827 
	C162.057922,231.757584 148.756638,224.055481 136.095718,214.997437 
	C126.319038,208.002869 116.220627,201.682983 104.334854,198.769287 
	C97.850189,197.179642 91.407829,196.928116 84.433403,197.839096 
	C86.425728,202.711456 89.515656,205.968765 92.607597,209.151474 
	C107.396133,224.374069 125.329857,233.931152 146.844421,238.601273 
z"
      />

      {/* Animation styles */}
      {animated && (
        <style jsx>{`
          @keyframes flow {
            0% {
              transform: scale(1) rotate(0deg);
              filter: hue-rotate(0deg);
            }
            25% {
              transform: scale(1.05) rotate(1deg);
              filter: hue-rotate(90deg);
            }
            50% {
              transform: scale(1.1) rotate(0deg);
              filter: hue-rotate(180deg);
            }
            75% {
              transform: scale(1.05) rotate(-1deg);
              filter: hue-rotate(270deg);
            }
            100% {
              transform: scale(1) rotate(0deg);
              filter: hue-rotate(360deg);
            }
          }

          .animate-flow {
            animation: flow 4s ease-in-out infinite;
          }
        `}</style>
      )}
    </svg>
  )
}
